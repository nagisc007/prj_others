# -*- coding: utf-8 -*-
"""Story: chapter 1 ''
"""
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '../..'))
sys.path.append('storybuilder')

from storybuilder.builder import world as wd
from src.pants import config as cnf
THM = cnf.THEMES

# titles
TITLE = [
        # chapter2
        # NOTE: １話あたり2000から3000字程度、増えたら前後編
        "監獄パンツ",# NOTE: 彼女の名前と監獄迷宮説明
        "パンツを喰らう犬",# NOTE: 初めての戦闘、番犬ども
        "",# NOTE: 迷宮崩壊
        "",# NOTE: 監獄迷宮出たら妹が待っていた
        ]

# scenes
## ep9 scenes
def sc_intheprison(w: wd.World):
    h = hero = w.hero
    ery = w.ery
    return w.scene("監獄の中で輝いて",
            h.be(w.stage.prison1, w.day.outprison),
            h.hear("ぺたりぺたりと", "小さな足が歩いていく音を$meは聞いていた……パンツで"),
            hero.talk("なあ", "ここって一応迷宮になってるんだろ？",
                "あんたは迷わずに出られる自信でもあるのか？"),
            h.think("先程から全く悩むことなく分岐路を選ぶ様から勝手にそう判断していたのだが",
                "どうも迷っているんじゃないだろうか", "という疑惑が生まれた"),
            hero.talk("ここ", "さっきも曲がった気がするんだが",
                "同じところを歩いているってことはないよな？"),
            ery.talk("一応説明したとは思うが", "この$st_prisonを造ったのはこの$meなのだぞ？",
                "創造主が出られない迷宮を造るなど", "そんなことがあると思うか", "なあ$hero？"),
            h.deal("フハハ", "と笑い声を響かせつつもどう考えてもさっきも通ったと思われる通路をまた曲がる"),
            h.look("天井の低い通路は固い一枚岩を彫り抜いて造ったというのだが",
                "光源もなく", "空気が循環しているかも怪しい。",
                "それでも指先に灯した小さな光だけで歩いていく彼女は特別苦しそうでもないし",
                "パンツである$meは当然息をする必要がないのでそういった苦痛は微塵もない"),
            hero.talk("いやどう考えても同じところをさっきからぐるぐるぐるぐる回っていると思うんだが",
                "ひょっとしてあんた", "方向音痴ってことはないだろうな？"),
            ery.talk("$meが？", "方向に疎いとそう申すのか？"),
            h.think("道に迷う人間は何故か自分は迷うはずがないという自信に満ちている。",
                "$meの元彼女もそうで",
                "デートの待ち合わせにいつも遅れてくるのは「道路が勝手に動いくから」という",
                "彼女の方向音痴加減がその大きな要因だった"),
            ery.talk("万に一つも迷うなどといったことはなかろうが",
                "仮にいつまでもここを出られないというのであれば",
                "最悪全てを破壊して脱出してしまえば良い"),
            h.think("その言葉を聞いて$meには",
                "天井が崩落して閉じ込められて泣きじゃくる彼女の姿しか思い浮かべられなかった"),
            ery.talk("何か不満があるようだな", "$heroよ"),
            h.think("そんな$meの不安を察してか不機嫌さの声で尋ねたが",
                "$meが問い返したのは別の疑問だった"),
            hero.talk("ところでその太郎というのを変える気はないのか？",
                "なんと言うか安直で", "小馬鹿にされているような気分になるんだ"),
            ery.talk("何を言っておるか$hero。",
                "$heroというのは”$i_mean_taro”という意味があってだな",
                "そもそも名を与えられるということそのものが大変に名誉なことなのだぞ？"),
            h.think("どうやら名前に対しての認識も$meの生きてきた世界とは異なるらしい。",
                "逆らったところで所詮はパンツ。", "何もできないので仕方なく太郎という呼び名を受け入れることにした"),
            ery.talk("分かれば良いのだ", "パンツ$heroよ"),
            hero.talk("いやせめてパンツは取ってくれよ"),
            ery.talk("何故だ？", "お主はパンツであり", "実に勤勉な$heroでもある。",
                "故にパンツ$heroというのはお主そのものの名ではないか？"),
            hero.talk("何でもだ。", "パンツよりは太郎と呼ばれた方が$meの世界ではまだマシなんだよ"),
            h.deal("お気に入りなのにな", "とぼやいた彼女は",
                "やはり何度も見たことがある分岐路で同じ方向に曲がる"),
            hero.talk("いやだから！", "何故考えることもなく右に曲がれるんだ？", "ここはさっき通っただろう？"),
            ery.talk("$heroはパンツの癖によく道順を覚えておるな……それならいっそのこと",
                "お主に道案内を頼みたい。", "どうだ$hero？"),
            h.deal("彼女はわざわざ自分の股間を覗き込むように体を丸めて$meと目を合わせると",
                "$meが「分かった」というまでじっと見つめていた"),
            h.deal("だから仕方なく承諾したものの",
                    "主導権が方向音痴から非方向音痴に代わったところで",
                    "地図を渡されている訳でもないし",
                    "もともと$st_prisonと呼ぶだけあってそれなりに入り組んだ通路になっているだろう。",
                    "対策なしに出口まで辿り着けるとは思えない"),
            hero.talk(""),
            # NOTE: 光を残してパンくず作戦、パンだけに
            # NOTE: 前方に敵影（番犬ども）
            h.look("その吠え声は徐々に近づいてくる。突き当りの通路の先にいる。彼女の掌の光で照らし出されたそこには$meが知る犬とは似ても似つかない、三つ首の化物が二匹、姿を見せた"),
            )

# episodes
def ep9(w: wd.World):
    return (w.chaptertitle(TITLE[0]),
            sc_intheprison(w),
            )

# outline
def story_baseinfo(w: wd.World):
    return [
            ]

def story_outline(w: wd.World):
    return [
            ]

# main
def story(w: wd.World):
    return (w.maintitle(cnf.TITLES["chap02"]),
            ep9(w),
            )

def main(): # pragma: no cover
    from src.pants.story import world
    w = world()
    return w.build(story(w))


if __name__ == '__main__':
    import sys
    sys.exit(main())

